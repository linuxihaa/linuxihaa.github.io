{"pageProps":{"page":{"slug":"2013-12-07_linux-treminal-trick","layout":"post","jdate":"Sat Dec 07 2013 00:00:00 GMT+0000","title":"5 شگرد جالب و کاربردی خط فرمان لینوکس","categories":["آموزشی"],"tags":["ترمینال"],"featured":"terminal2.png","keywords":["خط فرمان لینوکس","ترمینال لینوکس"],"description":"آموزش  شگردهای جالب و کاربردی خط فرمان لینوکس","timeToRead":5,"content":"\nتو این آموزش می خوایم در مورد ۵ روش جالب برای استفاده‌ی بهتر و سریع‌تر از خط فرمان لینوکس با هم صحبت کنیم. انشاالله به مرور قسمت‌های دیگه‌ی این آموزش رو هم می‌تونید از لینوکسی‌ها مطالعه کنید.  در آموزش‌های بعدی کارهای هیجان انگیزتری در خط فرمان انجام خواهیم داد!\n\n![](/images/terminal2.png)\n\n**توجه:** در این آموزش فرض شده که خواننده حداقل آشنایی نسبی با لینوکس و دستورات خط فرمان داره؛ اگه مشکلی تو فهمیدن کاری که این دستورات انجام میدن دارین، می تونین به [اینجا](http://linuxihaa.ir/%D9%85%D8%B1%D8%AC%D8%B9-%D8%AF%D8%B3%D8%AA%D9%88%D8%B1%D8%A7%D8%AA-%D8%AA%D8%B1%D9%85%DB%8C%D9%86%D8%A7%D9%84-%D9%84%DB%8C%D9%86%D9%88%DA%A9%D8%B3/) مراجعه کنید.\n\n**توجه:** _تمام این مثال‌ها تو پوسته‌ی bash‌ (پوسته‌ی پیش فرض اکثر توزیع‌های لینوکس) تست شده‌اند._\n\nخب! با مثال اول شروع می‌کنیم:\n\n### ۱. چطوری سریع و بی دردسر بین دایرکتوری های مختلف جابجا بشیم؟\n\nمعمولا وقتی داریم با خط فرمان لینوکس کار می‌کنیم، لازمه که بین تعدادی دایرکتوری مرتبا سوییچ کنیم. مثلا توی دایرکتوری A هستیم، به دایرکتوری B منتقل میشیم، حالا می خوایم دوباره برگردیم به دایرکتوری A. نوشتن کل آدرس اون دایرکتوری ممکنه کار مشکلی باشه. تو همچین شرایطی می تونیم از دستور میان‌بر `cd -` استفاده کنیم. مثلا:\n\n```sh\n$ pwd\n/home/mohammad\n$ cd /usr/local/bin/\n$ cd -\n/home/mohammad\n```\n\nاین جوری می‌تونیم به راحتی بین دو تا دایرکتوری جابجا بشیم.\n\n### ۲. چطور  از تاریخچه‌ی خط فرمان به صورت کاربردی استفاده کنیم؟\n\nبا استفاده از `!!` می تونیم آخرین دستور اجرا شده را دوباره فراخوانی کنیم. مثلا:\n\n```sh\n$ uname -a\nLinux mohammad-1015PN 3.8.0-26-generic #38-Ubuntu SMP Mon Jun 17 21:46:08 UTC 2013 i686 i686 i686 GNU/Linux\n$ !!\nuname -a\nLinux mohammad-1015PN 3.8.0-26-generic #38-Ubuntu SMP Mon Jun 17 21:46:08 UTC 2013 i686 i686 i686 GNU/Linux\n```\n\nخب! حالا چه کارای خلاقانه‌ای می تونیم با** !!** انجام بدیم؟  \nاول از همه می‌تونیم با دستورات دیگه ترکیبش کنیم، مثلا:\n\n```sh\n$ !! | grep Linux\nuname -a | grep Linux\nLinux mohammad-1015PN 3.8.0-26-generic #38-Ubuntu SMP Mon Jun 17 21:46:08 UTC 2013 i686 i686 i686 GNU/Linux\n```\n\nو معمولا خیلی پیش میاد که دستوری رو وارد می کنید و خطایی رو مشاهده می کنین که این دستور، سطح دسترسی root لازم داره. تو این موارد اولین چیزی که به نظر می رسه اینه که دکمه ی up arrow  و بعد home رو بزنیم و ابتدای دستور sudo رو اضافه کنیم. با استفاده از !!‌ می تونیم راحت تر این کار رو انجام بدیم:\n\n```sh\n$ touch new_binary\ntouch: cannot touch 'new_binary': Permission denied\n$ sudo !!\nsudo touch new_binary\n[sudo] password for mohammad:\n$ ls new_binary\nnew_binary\n```\n\nمورد استفاده دیگه می‌تونه این باشه که می‌خوایم یه دستور رو به آخر یه فایل shell اضافه کنیم. یا مثلا یه فایل shell‌ از دستوری که الان وارد کردیم درست کنیم:\n\n```sh\n$ ls -lart /home/mohammad/test/*.py\n-rw-rw-r-- 1 mohammad mohammad 50 Mar 1 00:23 /home/mohammad/test/test.py\n$ echo !! > myscript.sh\necho ls -lart /home/himanshu/practice/*.py > script.sh\n$ cat script.sh\nls -lart /home/mohammad/test/*.py\n```\n\nپس مسلما استفاده از !! می تونه خیلی کمک کننده باشه و باعث صرفه جویی در وقت میشه.  \nمورد دیگه استفاده از **!** به صورت تکی هست که مثلا تو این مورد می‌تونه کاربرد داشته باشه که می‌خوایم یه دستور خاص رو از سری دستوراتی که قبلا وارد کردیم اجرا کنیم، مثلا:\n\n```sh\n$ history\n...\n...\n...\n2039 uname -a | grep Linux\n2040 dmesg\n2041 clear\n2042 cd bin\n2043 clear\n2044 pwd\n2045 touch new_binary\n2046 sudo touch new_binary\n2047 ls new_binary\n2048 history\n$ !2039\nuname -a | grep Linux\nLinux mohammad-1015PN 3.8.0-26-generic #38-Ubuntu SMP Mon Jun 17 21:46:08 UTC 2013 i686 i686 i686 GNU/Linux\n```\n\nخیلی راحت تونستیم دستور 2039 از تاریخچه ی دستورهای خط فرمان رو دوباره اجرا کنیم، بدون اینکه نیازی باشه دوباره تایپش کنیم. این روش حتی از copy/paste هم راحت تره، نه؟!  \nحتی می‌تونیم به جای شماره دستور از ۲- ، یعنی عدد منفی استفاده کنیم:\n\n```sh\n$ history\n...\n...\n...\n2049 ! 2039\n2050 uname -a | grep Linux\n2051 history\n$ !-2\nuname -a | grep Linux\nLinux mohammad-1015PN 3.8.0-26-generic #38-Ubuntu SMP Mon Jun 17 21:46:08 UTC 2013 i686 i686 i686 GNU/Linux\n```\n\nاجرا کردن دستور با ورودی های دستور قبل با استفاده از !$\n\nفقط یه مثال رو ببینیم:\n\n```sh\n$ ls /home/mohammad/test/*.py\n/home/mohammad/test/firstPYProgram.py\n```\n\n```sh\n$ ls -lart !$\nls -lart /home/mohammad/test/*.py\n-rw-rw-r-- 1 mohammad mohammad 50 Mar 1 00:23 /home/mohammad/test/firstPYProgram.py\n```\n\nکه مقدار ورودی دستور قبلی رو تو دستور بعدی به عنوان ورودی استفاده کردیم.  \nمی تونیم از `![keyword]` برای تکرار آخرین دستوری که با keyword شروع میشه، استفاده کنیم:\n\n```sh\n$ !ls\nls -lart /home/mohammad/practice/*.py\n-rw-rw-r-- 1 mohammad mohammad 50 Mar 1 00:23 /home/mohammad/test/firstPYProgram.py\n```\n\n### ۳. چطور از  کاما استفاده کنیم؟!\n\nیکی از کاربرد های کاما اینه که بخوایم یه رشته یا ابتدای یه رشته رو به حروف کوچک تبدیل کنیم:\n\n```sh\n$ words=\"Example of comma OPERATOR\"\n```\n\n```sh\n$ echo ${words,}\nexample of comma OPERATOR\n```\n\n```sh\n$ {words,,}\nexample of comma operator\n```\n\nکه تو مثال اول فقط حرف اول رشته‌ی تعریف شده، و تو مثال دوم، کل رشته رو به حروف کوچک تبدیل کردیم.\n\nاستفاده از  کاما در اسم فایل\n\nیکی از کاربرد‌های جالب استفاده از کاما می‌تونه این باشه که مثلا می‌خوایم با دستوری مثل touch سه تا فایل بسازیم.\n\n```sh\n$ touch new_file{1,2,3}\n$ ls new_file*\nnew_file1  new_file2  new_file3\n```\n\nبا کاما خیلی راحت تونستیم اسم فایل‌ها رو وارد کنیم. در واقع محتویات داخل {} هر کدوم به اسم فایل اضافه شدن و در نهایت سه تا اسمی که می‌خواستیم ساخته شد.\n\nیکی از پرکاربردترین کارهایی که معمولا با این روش انجام میشه اینه که بخوایم اسم یه فایل رو موقتا تغییر بدیم تا مثلا دو نسخه ی جدید و قدیمی رو ازش داشته باشیم:\n\n```sh\n$ mv my_filename.{old,new}\n```\n\nکه فایلی به اسم my_filename.old رو به my_filename.new تغییر میده.\n\n### ۴. چطور با فایلی که ابتدای اسمش خط تیره (-) داره، کار کنیم؟\n\nحتما می دونید که تو خط فرمان معمولا پارامترهای دستورات مختلف رو با خط تیره مشخص می کنیم. حالا فرض کنید فایلی به اسم `-1mpFile.out` رو می خوایم پاک کنیم. خب! اگه از دستور `$ rm 1mpFilee.out` استفاده کنیم. با این خطا مواجه میشیم (حتی اگه از \"\" استفاده کنیم بازم خطا میده!) :\n\n```sh\nrm: invalid option -- '1'\nTry 'rm ./-1mpFile.out' to remove the file '-1mpFile.out'.\nTry 'rm --help' for more information.\n```\n\nیه راه حل، همین راه حلی هست که خط فرمان برامون نوشته، راه حل دیگه می تونه این باشه که دستور بالا رو اینجوری بنویسیم:\n\n```sh\n$ rm -- -1mpFile.out\n```\n\nیعنی دو تا خط تیره قرار میدیم و بعد اسم فایلمون.\n\nاین راه حل رو میشه تو موارد مشابه با دستورات دیگه هم به کار برد.\n\n### ۵. چطور همه ی فایل های یک دایرکتوری به جز تعداد خاصی رو حذف کنیم؟\n\nفرض کنید یه دایرکتوری داریم با تعداد زیادی فایل و می‌خوایم همه رو حذف کنیم، به جز تعدادی که پسوندهای خاصی دارند. مثلا تو این دایرکتوری:\n\n```sh\n$ ls\na.out         Cfile.c  file.c             macro.c     my_printf.c   orig_file.orig  stacksmash.c\nbfrovrflw.c   cmd.c    firstPYProgram.py  main.c      new_printf.c  orig_file.rej   test_strace.c\nbufrovrflw.c  env.c    helloworld.c       my_fopen.c  new.txt       prog.c          virtual_func.c\n```\n\nمی خوایم همه‌ی فایل‌های تو دایرکتوری رو پاک کنیم، به جز فایل‌های سورس کدمون(فایل های با پسوند c و py). برای این کار می تونیم از دستور rm به این صورت استفاده کنیم:\n\n```sh\n$ rm !(*.c|*.py)\n\n$ ls\nbfrovrflw.c   Cfile.c  env.c   firstPYProgram.py  macro.c  my_fopen.c   new_printf.c  stacksmash.c   virtual_func.c\nbufrovrflw.c  cmd.c    file.c  helloworld.c       main.c   my_printf.c  prog.c        test_strace.c\n```\n\nمی بینید که همه‌ی فایل ها به جز اونایی که پسوند c و py داشتن، حذف شدن. (در اینجا اپراتور ! به معنی مکمل هست، یعنی همه به جز این فایل‌ها)\n\nالبته از این روش مشخص کردن اسامی فایل‌ها تو دستورات دیگه هم میشه استفاده کرد.\n\nادامه دارد... :)"}},"__N_SSG":true}