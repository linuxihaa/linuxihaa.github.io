{"pageProps":{"page":{"slug":"2014-08-25_create-debian-package","layout":"post","jdate":"Mon Aug 25 2014 00:00:00 GMT+0000","user":"misam","title":"ساخت بسته دبیان","categories":["آموزشی"],"tags":["دبیان","توسعه"],"featured":"create-package.jpg","keywords":["بسته دبیان","debian package","deb","dh_make"],"description":"آموزش ساخت بسته دبیان","timeToRead":5,"content":"\nتوزیع‌هایی که پایه دبیان دارند از بسته‌های دبیان با پسوند `.deb` استفاده می‌کنند.\n\nروش‌های مختلفی برای ساخت بسته دبیان از یک برنامه وجود دارد. برخی روش‌ها به سادگی از فایل اجرایی برنامه، یک بسته باینری دبیان را تولید می‌کنند اما بسته باینری فقط برای رفع نیاز خودمان کافی است و فایل‌ها و بسته‌های دیگری نیز باید تولید شود تا بتوان برنامه را در مخزن (repository) توزیع‌های لینوکس منتشر کرد. برای انتشار یک برنامه در مخازن توزیع‌های لینوکس باید سورس برنامه نیز عرضه شود.\n\nدر اینجا روش پایه‌ای را می‌خواهیم دنبال کنیم که تمام فایل‌های مورد نیاز را برای ساخت بسته دبیان به ما می‌دهد که به آن ساخت بسته سورس دبیان (debian source package) می‌گویند. در این روش ما از سورس برنامه بسته را می‌سازیم (در مطلبی دیگر روش کوتاهی برای تولید بسته از فایل اجرایی را خواهیم گفت).\n\nدر اینجا من یک برنامه آزمایشی می‌سازم و فرایند ساخت بسته را انجام می‌دهم تا با روش آن آشنا شویم.\n\nقبل از هر چیز ابزارهای مورد نیاز را نصب می‌کنیم.\n\n```sh\nsudo apt-get install dh-make build-essential devscripts fakeroot debootstrap pbuilder\n```\n\nسپس بر اساس نام برنامه و نسخه آن پوشه‌ای ایجاد می‌کنیم. مثلا linuxihaa-1.0\n\nاکنون درون پوشه یک فایل linuxihaa.c ایجاد می‌کنیم و برنامه ساده‌ای (که با اجرای آن متن Linuxihaa.IR نمایش داده می‌شود) درون آن می‌نویسیم.\n\n```c\n#include <stdio.h>\n\nint main() {\n\tprintf(\"Linuxihaa.IR\\n\");\n\treturn 0;\n}\n```\n\nاین فایل اصلی برنامه ما است که با کمپایل آن می‌خواهیم فایل اجرایی linuxihaa تولید شود.\n\nاکنون دورن همان پوشه فایل Makefile را می‌سازیم.\n\n```make\nDESTDIR=/\nINSTALL_LOCATION=$(DESTDIR)/usr/\nall:\n\tgcc linuxihaa.c -o linuxihaa\ninstall:\n\tmkdir -p $(INSTALL_LOCATION)/bin\n\tcp linuxihaa $(INSTALL_LOCATION)/bin\nclean:\n\trm linuxihaa\n```\n\nاین فایل دارای سه بخش است که بخش all وظیفه کمپایل کدها را بر عهده دارد؛ بخش install دستوراتی است که جهت نصب برنامه (قرار دادن فایل اجرایی و دیگر فایل‌ها در جای مناسب) استفاده می‌شود و بخش clean برای پاک کردن فایل‌های تولید شده در بخش all است.\n\nدر اینجا ما مسیر قرار دادن فایل اجرایی برنامه را شاخه /usr در نظر گرفته‌ایم؛ شاخه‌ای که فایل‌های اجرایی کاربران در آن قرار می‌گیرند و مانند دستورات ترمینال قابل فراخوانی و اجرا هستند. یعنی بعد از نصب برنامه با وارد کردن دستور linuxihaa در ترمینال نوشته Linuxihaa.IR برای کاربر نمایش داده می‌شود.\n\nاکنون تمام منابع و کدهای برنامه ما آماده شده است. از پوشه برنامه فایل tar.gz آن را می‌سازیم. این همان بسته‌ای است که به عنوان نسخه عمومی (generic) برای توزیع‌های لینوکس ارائه می‌شود. با این بسته کاربر می‌تواند بعد از استخراج (extract) آن دستور make را وارد کرده و فایل اجرایی را بسازد و استفاده کند. همچنین با دستور make install فایل اجرایی در مسیر مناسب قرار می‌گیرد و کاربر می‌تواند به عنوان یک برنامه نصب شده روی سیستم از آن استفاده کند.\n\nخب اکنون باید از بسته عمومی، بسته دبیان را بسازیم.\n\nابتدا ایمیل و نام خود را برای مراحل بعدی معرفی می‌کنیم.\n\n```sh\nDEBEMAIL=\"info@linxuihaa.ir\"\nDEBFULLNAME=\"Linuxihaa\"\nexport DEBEMAIL DEBFULLNAME\n```\n\nسپس به پوشه برنامه رفته و دستور زیر را وارد می‌کنیم تا فایل‌های مورد نیاز برای ساخت بسته دبیان ساخته شود.\n\n* بخشی از دستورات که با رنگ تیره مشخص شده است مسیر جاری ما است.\n\n```sh\n~/linuxihaa-1.0$ dh_make -c gpl3 -f ../linuxihaa-1.0.tar.gz\n```\n\nدر اینجا من بعد از سوایچ c لایسنس برنامه که gpl3 در نظر گرفته‌ام را نوشتم.\n\nبا اجرای دستور بالا و وارد کردن s در جواب سوال نوع بسته (می‌خواهیم یک بسته معمولی عادی بسازیم)، خروجی زیر مشاهده می‌شود که جهت تایید اطلاعات است.\n\n```sh\nType of package: single binary, indep binary, multiple binary, library, kernel module, kernel patch?\n [s/i/m/l/k/n] s\n\nMaintainer name  : Linuxihaa.IR\nEmail-Address    : info@linuxihaa.ir \nDate             : Mon, 25 Aug 2014 18:46:30 +0430\nPackage Name     : linuxihaa\nVersion          : 1.0\nLicense          : gpl3\nType of Package  : Single\nHit  to confirm: \nDone. Please edit the files in the debian/ subdirectory now. You should also\ncheck that the linuxihaa Makefiles install into $DESTDIR and not in / .\n```\n\nاکنون در شاخه برنامه، پوشه debian ساخته شده است که حاوی فایل‌هایی برای ساخت بسته دبیان است. با دستور زیر برخی از فایل‌هایی که در اینجا نیاز نیستند را حذف می‌کنیم.\n\n```sh\n~/linuxihaa-1.0/debian$ rm -f *.ex *.EX README.*\n```\n\nدو فایل اصلی در پوشه debian وجود دارد که باید آن‌ها را ویرایش کرد.\n\n**فایل control**\n\n```\nSource: linuxihaa\nSection: unknown\nPriority: optional\nMaintainer: Linuxihaa.IR <info@linuxihaa.ir>\nBuild-Depends: debhelper (>= 8.0.0)\nStandards-Version: 3.9.4\nHomepage: <insert the upstream URL, if relevant>\n#Vcs-Git: git://git.debian.org/collab-maint/linuxihaa.git\n#Vcs-Browser: http://git.debian.org/?p=collab-maint/linuxihaa.git;a=summary\n\nPackage: linuxihaa\nArchitecture: any\nDepends: ${shlibs:Depends}, ${misc:Depends}\nDescription: <insert up to 60 chars description>\n <insert long description, indented with spaces>\n```\n\nمواردی که باید ویرایش شوند Section (بخش برنامه)، Homepage (آدرس سایت توسعه‌دهنده)، Depends (بسته‌هایی که برنامه ما برای اجرا به آن نیاز دارد) و Description (توضیحات برنامه) هستند. بخش توضیحات شامل توضیح کوتاه در ۶۰ حرف و توضیح بلند در خطوط جدا (اول هر خط یک فاصله باید قرار گیرد) است.\n\nموارد Vcs هم مربوط به آدرس نگهدارنده نسخه برنامه هستند که در اینجا گیت در نظر گرفته و آدرسی برای آن فرض شده است که به علت این‌که برنامه ما در این آدرس نگهداری نمی‌شود از آن صرف نظر می‌کنیم.\n\nما فایل control را به شکل زیر ویرایش می‌کنیم.\n\n```\nSource: linuxihaa\nSection: utils\nPriority: optional\nMaintainer: Linuxihaa.IR <info@linuxihaa.ir>\nBuild-Depends: debhelper (>= 8.0.0)\nStandards-Version: 3.9.4\nHomepage: http://linuxihaa.ir\n\nPackage: linuxihaa\nArchitecture: any\nDescription: Linuxihaa Debian Test Package\n This software literally prints \"Linuxihaa.IR\".\n```\n\nهمان‌طور که مشاهده می‌کنید مورد Depends را نیز حذف کردیم زیرا برنامه ما بسیار ساده است و به بسته خاصی نیاز ندارد.\n\n**فایل copyright**\n\nاین فایل بسته به لایسنسی که در دستور dh_make انتخاب کردیم ایجاد می‌شود و موارد کوچکی دارد که باید براساس اطلاعات سازنده کامل شود.\n\nمثلا فایل copyright برنامه ما بعد از ویراش این‌گونه است.\n\n```sh\nFormat: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/\nUpstream-Name: linuxihaa\nSource: [آدرس سورس برنامه]\n\nFiles: *\nCopyright: 2014 info@linuxihaa.ir\n           2014 Linuxihaa\nLicense: GPL-3.0+\n```\n\nبعد از ویرایش این فایل‌ها نوبت به ساخت بسته‌ها می‌رسد.\n\nبه پوشه اصلی برنامه باز می‌گردیم و دستور زیر را وارد می‌کنیم تا فایل‌های مورد نیاز بسته سورس دبیان ساخته شوند.\n\n```sh\ndebuild -S\n```\n\nخب تمام شد! فایل‌هایی که برای انتشار برنامه نیاز هستند آماده شدند.\n\n*   linuxihaa_1.0.orig.tar.gz\n*   linuxihaa_1.0-1.debian.tar.gz\n*   linuxihaa_1.0-1.dsc\n*   linuxihaa_1.0-1.changes\n\nاز این مرحله به بعد **اختیاری** است و برای تولید بسته‌های باینتری (.deb) برنامه، جهت استفاده شخصی و آزمودن آن برای خودمان هست زیرا مخازن با دریافت فایل‌های بالا، خودشان بسته‌های باینری را ساخته و در مخزن قرار می‌دهند.\n\nخب در همان پوشه مراحل زیر را دنبال می‌کنیم تا بسته باینری برنامه ساخته شود.\n\n```sh\nfakeroot debian/rules build\n```\n\nاکنون با دستور زیر بسته باینری دبیان را از برنامه می‌سازیم.\n\n```sh\nfakeroot debian/rules binary\n```\n\nاگر از پوشه برنامه خارج شوید مشاهده می‌کنید که بسته قابل نصب با پسوند deb از برنامه ایجاد شده است و می‌توان آن را نصب کرد اما کار ما هنوز تمام نشده است. این یک بسته باینری است و به معماری سیستم ما محدود است؛ برای تکمیل کار و انتشار برنامه باید فایل‌های دیگری نیز ساخته شود که با دستور زیر ایجاد می‌شوند.\n\n```sh\ndebuild -us -uc\n```\n\nاکنون به شاخه بالای پوشه برنامه بازگردید و دستور زیر را وارد کنید تا فایل‌های موقت حذف شوند و بسته‌های سورس از بسته ما استخراج گردد.\n\n```sh\n~/$ dpkg-source -x linuxihaa_1.0-1.dsc\n```\n\nخب این مرحله هم تمام شد و بسته باینری در کنار دیگر بسته‌های سورس دبیان قابل مشاهده است.\n\n* مرجع santi-bassett.blogspot.com/2014/07/how-to-create-debian-package.html\n\n* تصویر شاخص از raphaelhertzog.com"}},"__N_SSG":true}